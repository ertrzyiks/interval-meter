{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatElapsedTime","ms","min","concat","Math","round","reducer","state","action","type","now","Date","elapsedTime","length","id","Object","toConsumableArray","slice","console","log","filter","_ref","Error","App","_ref2","initialState","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","toDelete","setToDelete","useEffect","window","localStorage","setItem","JSON","stringify","react_default","a","createElement","className","Button","variant","size","color","onClick","Container","maxWidth","Paper","List","lib","map","_ref3","timestamp","ListItem","key","ListItemIcon","OfflineBolt_default","Done_default","ListItemText","primary","format","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","Delete_default","Dialog","open","Boolean","onClose","DialogTitle","DialogActions","autoFocus","location","hostname","match","ReactDOM","render","src_App","Array","from","parse","getItem","e","getInitialState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"waAsBA,SAASA,EAAkBC,GACzB,IAEMC,EAFID,EAAK,IAEC,GAChB,OAAIC,EAAM,EACD,SAGT,KAAAC,OAAYC,KAAKC,MAAMH,GAAvB,OAOF,SAASI,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,OACH,IAAMC,EAAMC,KAAKD,MACXE,EAAcL,EAAMM,OAAS,EAAIH,EAAMH,EAAM,GAAGG,IAAM,KAE5D,MAAO,CAAC,CAACI,GADEP,EAAMM,OAAS,EAAIN,EAAM,GAAGO,GAAK,EAAI,EACnCF,cAAaF,QAAnBP,OAAAY,OAAAC,EAAA,EAAAD,CAA4BR,IAAOU,MAAM,EAAG,IACrD,IAAK,SAEH,OADAC,QAAQC,IAAI,SAAUX,EAAOM,IACtBP,EAAMa,OAAO,SAAAC,GAAA,OAAAA,EAAEP,KAAeN,EAAOM,KAC9C,QACE,MAAM,IAAIQ,OA0EDC,MAtEf,SAAAC,GAA6B,IAAfC,EAAeD,EAAfC,aAAeC,EACDC,qBAAWrB,EAASmB,GADnBG,EAAAb,OAAAc,EAAA,EAAAd,CAAAW,EAAA,GACpBnB,EADoBqB,EAAA,GACbE,EADaF,EAAA,GAAAG,EAEKC,mBAAS,MAFdC,EAAAlB,OAAAc,EAAA,EAAAd,CAAAgB,EAAA,GAEpBG,EAFoBD,EAAA,GAEVE,EAFUF,EAAA,GAW3B,OAPAG,oBACE,WACEC,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUlC,KAEtD,CAACA,IAIDmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,KAAK,QAAQC,MAAM,UAAUC,QAAS,kBAAMpB,EAAS,CAACrB,KAAM,WAAxF,QAKFiC,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAWC,SAAS,MAClBV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACI9C,EAAMM,OAAS,GACf6B,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACW,EAAA,aAAD,KACChD,EAAMiD,IAAI,SAAAC,GAAA,IA3CJC,EA2CMhD,EAAF+C,EAAE/C,IAAKE,EAAP6C,EAAO7C,YAAaE,EAApB2C,EAAoB3C,GAApB,OACT4B,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAUC,IAAK9C,GACb4B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACIjD,GAAeA,EAAc,IAAiB8B,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,MAAkBD,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,OAEpED,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAcC,SAhDXP,EAgD+BhD,EA/C3CwD,IAAO,IAAIvD,KAAK+C,GAAY,UA+CqBS,UAAWvD,GAAeZ,EAAkBY,KAEpF8B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,WAAWrB,QAAS,kBAAMf,EAAYrB,KACtE4B,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,aASO,IAAjBpC,EAAMM,QACN6B,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAcC,QAAQ,sDAOhCvB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,KAAMC,QAAQzC,GACd0C,QAAS,kBAAMzC,EAAY,QAE3BO,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAa/D,GAAG,sBAAhB,qCACA4B,EAAAC,EAAAC,cAACkC,EAAA,EAAD,KACEpC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQI,QAAS,WAAQpB,EAAS,CAACrB,KAAM,SAAUK,GAAIoB,IAAYC,EAAY,OAAUc,MAAM,YAAY8B,WAAS,GAApH,UAGArC,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQI,QAAS,kBAAMf,EAAY,OAAOc,MAAM,WAAhD,eCrGU0B,QACW,cAA7BtC,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,CAAK5D,aARrB,WACE,IACE,OAAO6D,MAAMC,KAAK/C,KAAKgD,MAAMnD,OAAOC,aAAamD,QAAQ,WACzD,MAAOC,GACP,MAAO,IAIwBC,KAAsBC,SAASC,eAAe,SDmH3E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a5527b78.chunk.js","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport OfflineBolt from '@material-ui/icons/OfflineBolt';\nimport Done from '@material-ui/icons/Done';\nimport Delete from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { AnimateGroup } from 'react-animate-mount'\nimport format from 'date-fns/format'\nimport './App.css';\n\nfunction formatElapsedTime(ms) {\n  const s = ms / 1000\n\n  const min = s / 60\n  if (min < 1) {\n    return '< 1min'\n  }\n\n  return `~ ${Math.round(min)}min`\n}\n\nfunction formatTime (timestamp) {\n  return format(new Date(timestamp), 'HH:mm')\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'tick':\n      const now = Date.now()\n      const elapsedTime = state.length > 0 ? now - state[0].now : null\n      const id = state.length > 0 ? state[0].id + 1 : 1\n      return [{id, elapsedTime, now}, ...state].slice(0, 20)\n    case 'delete':\n      console.log('DELETE', action.id)\n      return state.filter(({id}) => id !== action.id)\n    default:\n      throw new Error()\n  }\n}\n\nfunction App({initialState}) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const [toDelete, setToDelete] = useState(null)\n\n  useEffect(\n    () => {\n      window.localStorage.setItem('items', JSON.stringify(state));\n    },\n    [state]\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Button variant=\"contained\" size='large' color=\"primary\" onClick={() => dispatch({type: 'tick'})}>\n          Now\n        </Button>\n      </header>\n\n      <Container maxWidth=\"sm\">\n        <Paper>\n          { state.length > 0 &&\n            <List>\n              <AnimateGroup>\n              {state.map(({now, elapsedTime, id}) =>\n                <ListItem key={id}>\n                  <ListItemIcon>\n                    { elapsedTime && elapsedTime < 10 * 60 * 1000 ? <OfflineBolt /> : <Done />}\n                  </ListItemIcon>\n                  <ListItemText primary={formatTime(now)} secondary={elapsedTime && formatElapsedTime(elapsedTime)} />\n\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" aria-label=\"Comments\" onClick={() => setToDelete(id)}>\n                      <Delete />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )}\n              </AnimateGroup>\n            </List>\n          }\n\n          { state.length === 0 &&\n            <List>\n              <ListItem>\n                <ListItemText primary='Click the button to start measuring intervals' />\n              </ListItem>\n            </List>\n          }\n        </Paper>\n      </Container>\n\n      <Dialog\n        open={Boolean(toDelete)}\n        onClose={() => setToDelete(null)}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Are you sure to remove this item?</DialogTitle>\n        <DialogActions>\n          <Button onClick={() => { dispatch({type: 'delete', id: toDelete}); setToDelete(null) } } color=\"secondary\" autoFocus>\n            Delete\n          </Button>\n          <Button onClick={() => setToDelete(null)} color=\"primary\">\n            Keep it\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction getInitialState() {\n  try {\n    return Array.from(JSON.parse(window.localStorage.getItem('items')))\n  } catch (e) {\n    return []\n  }\n}\n\nReactDOM.render(<App initialState={getInitialState()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}