{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatElapsedTime","ms","min","concat","Math","round","reducer","state","action","now","Date","elapsedTime","length","id","Object","toConsumableArray","slice","Error","App","_ref","initialState","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","window","localStorage","setItem","JSON","stringify","react_default","a","createElement","className","Button","variant","color","onClick","Container","maxWidth","Paper","List","lib","map","_ref2","timestamp","ListItem","key","ListItemText","primary","format","secondary","Boolean","location","hostname","match","ReactDOM","render","src_App","Array","from","parse","getItem","e","getInitialState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAWA,SAASA,EAAkBC,GACzB,IAEMC,EAFID,EAAK,IAEC,GAChB,OAAIC,EAAM,EACD,SAGT,KAAAC,OAAYC,KAAKC,MAAMH,GAAvB,OAOF,SAASI,EAAQC,EAAOC,GACtB,OAAQA,GACN,IAAK,OACH,IAAMC,EAAMC,KAAKD,MACXE,EAAcJ,EAAMK,OAAS,EAAIH,EAAMF,EAAM,GAAGE,IAAM,KAE5D,MAAO,CAAC,CAACI,GADEN,EAAMK,OAAS,EAAIL,EAAM,GAAGM,GAAK,EAAI,EACnCF,cAAaF,QAAnBN,OAAAW,OAAAC,EAAA,EAAAD,CAA4BP,IAAOS,MAAM,EAAG,IACrD,QACE,MAAM,IAAIC,OAiDDC,MA7Cf,SAAAC,GAA6B,IAAfC,EAAeD,EAAfC,aAAeC,EACDC,qBAAWhB,EAASc,GADnBG,EAAAT,OAAAU,EAAA,EAAAV,CAAAO,EAAA,GACpBd,EADoBgB,EAAA,GACbE,EADaF,EAAA,GAU3B,OAPAG,oBACE,WACEC,OAAOC,aAAaC,QAAQ,QAASC,KAAKC,UAAUxB,KAEtD,CAACA,IAIDyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAMd,EAAS,UAApE,QAKFO,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAWC,SAAS,MAClBT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACInC,EAAMK,OAAS,GACfoB,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,aAAD,KACCrC,EAAMsC,IAAI,SAAAC,GAAA,IAvCJC,EAuCMtC,EAAFqC,EAAErC,IAAKE,EAAPmC,EAAOnC,YAAaE,EAApBiC,EAAoBjC,GAApB,OACTmB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,IAAKpC,GACbmB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcC,SAzCXJ,EAyC+BtC,EAxC3C2C,IAAO,IAAI1C,KAAKqC,GAAY,UAwCqBM,UAAW1C,GAAeX,EAAkBW,UAOzE,IAAjBJ,EAAMK,QACNoB,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAcC,QAAQ,wDC7DlBG,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCJNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAKxC,aARrB,WACE,IACE,OAAOyC,MAAMC,KAAKhC,KAAKiC,MAAMpC,OAAOC,aAAaoC,QAAQ,WACzD,MAAOC,GACP,MAAO,IAIwBC,KAAsBC,SAASC,eAAe,SDmH3E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.80a5008c.chunk.js","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { AnimateGroup } from 'react-animate-mount'\nimport format from 'date-fns/format'\nimport './App.css';\n\nfunction formatElapsedTime(ms) {\n  const s = ms / 1000\n\n  const min = s < 60\n  if (min < 1) {\n    return '< 1min'\n  }\n\n  return `~ ${Math.round(min)}min`\n}\n\nfunction formatTime (timestamp) {\n  return format(new Date(timestamp), 'HH:mm')\n}\n\nfunction reducer(state, action) {\n  switch (action) {\n    case 'tick':\n      const now = Date.now()\n      const elapsedTime = state.length > 0 ? now - state[0].now : null\n      const id = state.length > 0 ? state[0].id + 1 : 1\n      return [{id, elapsedTime, now}, ...state].slice(0, 20)\n    default:\n      throw new Error()\n  }\n}\n\nfunction App({initialState}) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(\n    () => {\n      window.localStorage.setItem('items', JSON.stringify(state));\n    },\n    [state]\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Button variant=\"contained\" color=\"primary\" onClick={() => dispatch('tick')}>\n          Now\n        </Button>\n      </header>\n\n      <Container maxWidth=\"sm\">\n        <Paper>\n          { state.length > 0 &&\n            <List>\n              <AnimateGroup>\n              {state.map(({now, elapsedTime, id}) =>\n                <ListItem key={id}>\n                  <ListItemText primary={formatTime(now)} secondary={elapsedTime && formatElapsedTime(elapsedTime)} />\n                </ListItem>\n              )}\n              </AnimateGroup>\n            </List>\n          }\n\n          { state.length === 0 &&\n            <List>\n              <ListItem>\n                <ListItemText primary='Click the button to start measuring intervals' />\n              </ListItem>\n            </List>\n          }\n        </Paper>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction getInitialState() {\n  try {\n    return Array.from(JSON.parse(window.localStorage.getItem('items')))\n  } catch (e) {\n    return []\n  }\n}\n\nReactDOM.render(<App initialState={getInitialState()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}